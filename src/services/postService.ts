import { light } from '@cloudinary/url-gen/qualifiers/fontWeight';
import { Post, Region } from '../types';
import { api } from './api';
import { uploadPostImage } from './cloudinaryService';

/**
 * L·∫•y danh s√°ch b√†i ƒëƒÉng g·∫ßn v·ªã tr√≠ hi·ªán t·∫°i
 * @param region V√πng hi·ªán t·∫°i (v·ªã tr√≠ v√† ph·∫°m vi)
 * @returns Promise<Post[]> Danh s√°ch b√†i ƒëƒÉng
 */
export const getNearbyPosts = async (region: Region): Promise<Post[]> => {
  try {
    // G·ªçi API ƒë·ªÉ l·∫•y b√†i ƒëƒÉng g·∫ßn ƒë√¢y
    const response = await api.posts.getNearbyPosts(
      region.latitude, 
      region.longitude, 
      10 // B√°n k√≠nh m·∫∑c ƒë·ªãnh (c√≥ th·ªÉ ƒëi·ªÅu ch·ªânh d·ª±a tr√™n k√≠ch th∆∞·ªõc khu v·ª±c xem)
    );
    
    if (response.data && Array.isArray(response.data)) {
      return response.data.map(mapBackendPostToAppPost);
    }
    
    console.log('No nearby posts found or invalid response format');
    return [];  } catch (error) {
    console.error('Error fetching nearby posts:', error);
    return [];
  }
};

/**
 * L·∫•y danh s√°ch b√†i ƒëƒÉng c·ªßa b·∫°n b√®
 * @returns Promise<Post[]> Danh s√°ch b√†i ƒëƒÉng
 */
export const getFriendPosts = async (): Promise<Post[]> => {
  try {
    // G·ªçi API ƒë·ªÉ l·∫•y b√†i ƒëƒÉng c·ªßa b·∫°n b√®
    const response = await api.posts.getFriendsPosts();
    
    if (response.data && Array.isArray(response.data)) {
      return response.data.map(mapBackendPostToAppPost);
    }
    
    console.log('No friend posts found or invalid response format');
    return [];
  } catch (error) {
    console.error('Error fetching friend posts:', error);
    return [];
  }
};

/**
 * T·∫°o b√†i ƒëƒÉng m·ªõi
 * @param postData D·ªØ li·ªáu b√†i ƒëƒÉng
 * @returns Promise v·ªõi ƒë·ªëi t∆∞·ª£ng ch·ª©a data (n·∫øu th√†nh c√¥ng) ho·∫∑c error (n·∫øu th·∫•t b·∫°i)
 */
export const createPost = async (postData: any) => {
  try {
    // 1. Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
    if (!postData.imageUrl || !postData.caption || !postData.location) {
      return { error: 'Missing required post data' };
    }

    // 2. T·∫£i ·∫£nh l√™n Cloudinary n·∫øu c·∫ßn
    let imageUrl = postData.imageUrl;
    if (postData.imageUrl.startsWith('file://')) {
      imageUrl = await uploadPostImage(postData.imageUrl);
      if (!imageUrl) {
        return { error: 'Failed to upload image to Cloudinary' };
      }
    }

    // 3. Chu·∫©n b·ªã d·ªØ li·ªáu g·ª≠i ƒë·∫øn API
    const apiPostData = {
      image: imageUrl,
      caption: postData.caption,
      location: {
        type: 'Point',
        coordinates: [
          postData.location.longitude,
          postData.location.latitude,
        ],
        placeName: postData.location.name,
      },
    };    // 4. G·ª≠i y√™u c·∫ßu ƒë·∫øn API backend
    const response = await api.posts.createPost(apiPostData);

    // 5. X·ª≠ l√Ω ph·∫£n h·ªìi t·ª´ API
    if (response.data) {
      const postId = response.data.id || response.data._id;
      
      // Backend ƒë√£ t·ª± ƒë·ªông l∆∞u th√¥ng tin ·∫£nh v√†o uploads collection
      console.log('Post created successfully, image info saved by backend');

      return {
        data: {
          id: postId,
          userId: postData.userId,
          image: imageUrl,
          caption: postData.caption,
          location: postData.location,
          likeCount: response.data.likeCount || 0,
          isLiked: false, // Assume new post is not liked by default
          commentCount: response.data.commentCount || 0,
          comments: response.data.comments || [],
          createdAt: new Date(response.data.createdAt),
        },
      };
    }

    return { error: response.error || 'Failed to create post' };
  } catch (error) {
    console.error('Error creating post:', error);
    return { error: 'Unable to create post' };
  }
};

/**
 * √Ånh x·∫° d·ªØ li·ªáu b√†i ƒëƒÉng t·ª´ backend sang ƒë·ªãnh d·∫°ng c·ªßa ·ª©ng d·ª•ng
 */
export const mapBackendPostToAppPost = (backendPost: any): Post => {
  let userId = backendPost.userId;
  let user = undefined;
  
  if (backendPost.user) {
    if (typeof backendPost.user === 'object' && backendPost.user !== null) {
      userId = backendPost.user._id;
      user = {
        _id: backendPost.user._id,
        fullname: backendPost.user.fullName || backendPost.user.fullname || backendPost.user.username || 'Unknown User',
        username: backendPost.user.username,
        avatar: backendPost.user.avatar,
        bio: backendPost.user.bio || ''
      };
    } else {
      userId = backendPost.user;
    }
  }
  
  return {
    id: backendPost._id || backendPost.id,
    userId: userId,
    user: user,
    image: backendPost.imageUrl || backendPost.image,
    caption: backendPost.caption || '',
    location: {
      latitude: backendPost.location?.coordinates ? backendPost.location.coordinates[1] : 0,
      longitude: backendPost.location?.coordinates ? backendPost.location.coordinates[0] : 0,
      name: backendPost.location?.placeName || '',
    },
    likeCount: backendPost.likeCount || 0,
    isLiked: backendPost.isLiked || false, // Get from backend if available
    comments: backendPost.comments || [],
    commentCount: backendPost.commentCount || 0, // Add commentCount from backend
    createdAt: new Date(backendPost.createdAt),
  };
};

export const ensureStringId = (id: any): string => {
  if (!id) return '';
  if (typeof id === 'string') return id;
  if (typeof id === 'object' && id !== null) {
    return id.id || id._id || id.Id || '';
  }
  return String(id);
};

export const getUserPosts = async (includeExpired: boolean = true): Promise<Post[]> => {
  try {
    const response = await api.posts.getMyPosts(includeExpired);
    
    if (response.data && Array.isArray(response.data.posts)) {
      return response.data.posts.map(mapBackendPostToAppPost);
    }
    
    if (response.data && Array.isArray(response.data)) {
      return response.data.map(mapBackendPostToAppPost);
    }
    
    console.log('No user posts found or invalid response format');
    return [];
  } catch (error) {
    console.error('Error fetching user posts:', error);
    return [];
  }
}

/**
 * Like m·ªôt b√†i vi·∫øt
 * @param postId ID c·ªßa b√†i vi·∫øt c·∫ßn like
 * @returns Promise v·ªõi th√¥ng tin like ƒë√£ t·∫°o
 */
export const likePost = async (postId: string): Promise<{ success: boolean; error?: string; data?: any }> => {
  try {
    const response = await api.posts.likePost(postId);
    
    if (response.error) {
      return {
        success: false,
        error: response.error
      };
    }
    
    return {
      success: true,
      data: response.data
    };
  } catch (error) {
    console.error('Error liking post:', error);
    return {
      success: false,
      error: 'Unable to like post. Please try again later.'
    };
  }
};

/**
 * Unlike m·ªôt b√†i vi·∫øt
 * @param postId ID c·ªßa b√†i vi·∫øt c·∫ßn unlike
 * @returns Promise v·ªõi k·∫øt qu·∫£ unlike
 */
export const unlikePost = async (postId: string): Promise<{ success: boolean; error?: string; data?: any }> => {
  try {
    const response = await api.posts.unlikePost(postId);
    
    if (response.error) {
      return {
        success: false,
        error: response.error
      };
    }
    
    return {
      success: true,
      data: response.data
    };
  } catch (error) {
    console.error('Error unliking post:', error);
    return {
      success: false,
      error: 'Unable to unlike post. Please try again later.'
    };
  }
};

/**
 * Ki·ªÉm tra user ƒë√£ like post ch∆∞a
 * @param postId ID c·ªßa b√†i vi·∫øt
 * @returns Promise v·ªõi tr·∫°ng th√°i like
 */
export const checkUserLikedPost = async (postId: string): Promise<{ success: boolean; liked?: boolean; error?: string }> => {
  try {
    const response = await api.posts.checkUserLikedPost(postId);
    
    if (response.error) {
      return {
        success: false,
        error: response.error
      };
    }
    
    return {
      success: true,
      liked: response.data?.liked || false
    };
  } catch (error) {
    console.error('Error checking like status:', error);
    return {
      success: false,
      error: 'Unable to check like status.'
    };
  }
};

/**
 * L·∫•y danh s√°ch users ƒë√£ like post
 * @param postId ID c·ªßa b√†i vi·∫øt
 * @param page Trang (m·∫∑c ƒë·ªãnh 1)
 * @param limit S·ªë l∆∞·ª£ng m·ªói trang (m·∫∑c ƒë·ªãnh 20)
 * @returns Promise v·ªõi danh s√°ch likes
 */
export const getPostLikes = async (postId: string, page: number = 1, limit: number = 20): Promise<{ success: boolean; data?: any; error?: string }> => {
  try {
    const response = await api.posts.getPostLikes(postId, page, limit);
    
    if (response.error) {
      return {
        success: false,
        error: response.error
      };
    }
    
    return {
      success: true,
      data: response.data
    };
  } catch (error) {
    console.error('Error getting post likes:', error);
    return {
      success: false,
      error: 'Unable to get post likes.'
    };
  }
};

/**
 * X√≥a m·ªôt b√†i vi·∫øt
 * @param postId ID c·ªßa b√†i vi·∫øt c·∫ßn x√≥a
 * @returns Promise v·ªõi k·∫øt qu·∫£ x√≥a b√†i vi·∫øt
 */
export const deletePostById = async (postId: string): Promise<{ success: boolean; error?: string; message?: string }> => {
  try {
    const response = await api.posts.deletePost(postId);
    
    if (response.error) {
      return {
        success: false,
        error: response.error
      };
    }
    
    return {
      success: true,
      message: 'Post deleted successfully'
    };
  } catch (error) {
    console.error('Error deleting post:', error);
    return {
      success: false,
      error: 'Unable to delete post. Please try again later.'
    };
  }
};

/**
 * L·∫•y b√†i vi·∫øt theo ID
 * @param postId ID c·ªßa b√†i vi·∫øt c·∫ßn l·∫•y
 * @returns Promise v·ªõi b√†i vi·∫øt ho·∫∑c null n·∫øu kh√¥ng t√¨m th·∫•y
 */
export const getPostById = async (postId: string): Promise<Post | null> => {
  try {
    console.log('üîç getPostById - Starting API call for post ID:', postId);
    const response = await api.posts.getPostById(postId);
    
    console.log('üîç getPostById - API response received:', 
      response.error ? `Error: ${response.error}` : 'Success');
    console.log('üîç getPostById - Response data exists:', !!response.data);
    
    // Ki·ªÉm tra l·ªói b√†i vi·∫øt h·∫øt h·∫°n
    if (response.error && response.error.includes('expired')) {
      console.log('üîç getPostById - Post has expired (older than 24 hours)');
      throw new Error('Post has expired (older than 24 hours)');
    }
    
    if (response.data) {
      console.log('üîç getPostById - Post data received:', {
        id: response.data.id,
        userId: response.data.userId || response.data.user,
        caption: response.data.caption
      });
      return mapBackendPostToAppPost(response.data);
    }
    
    console.log('üîç getPostById - Post not found or invalid response format');
    return null;
  } catch (error) {
    console.error('üîç getPostById - Error fetching post by ID:', error);
    throw error; // N√©m l·ªói ƒë·ªÉ x·ª≠ l√Ω ·ªü l·ªõp cao h∆°n
  }
};

/**
 * L·∫•y danh s√°ch b√†i vi·∫øt c·ªßa m·ªôt ng∆∞·ªùi d√πng c·ª• th·ªÉ theo user ID
 * @param userId ID c·ªßa ng∆∞·ªùi d√πng
 * @param includeExpired C√≥ bao g·ªìm b√†i vi·∫øt h·∫øt h·∫°n kh√¥ng
 * @returns Promise<Post[]> Danh s√°ch b√†i vi·∫øt
 */
export const getUserPostsById = async (userId: string, includeExpired: boolean = false): Promise<Post[]> => {
  try {
    console.log('üìù getUserPostsById - Fetching posts for user:', userId, 'includeExpired:', includeExpired);
    
    const response = await api.posts.getUserPostsById(userId, includeExpired);
    
    if (response.data && Array.isArray(response.data)) {
      console.log('üìù getUserPostsById - Found posts count:', response.data.length);
      return response.data.map(mapBackendPostToAppPost);
    }
    
    console.log('üìù getUserPostsById - No posts found or invalid response format');
    return [];
  } catch (error) {
    console.error('üìù getUserPostsById - Error fetching user posts:', error);
    return [];
  }
};